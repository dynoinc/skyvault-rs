syntax = "proto3";

package skyvault.v1;

import "google/protobuf/empty.proto";

// WRITER
service WriterService {
  rpc WriteBatch (WriteBatchRequest) returns (WriteBatchResponse);
}

message WriteBatchRequest {
  repeated TableWriteBatchRequest tables = 1;
}

message TableWriteBatchRequest {
  string table_name = 1;
  repeated WriteBatchItem items = 2;
}

message WriteBatchItem {
  string key = 1;
  oneof operation {
    bytes value = 2;
  }
}

message WriteBatchResponse {
  int64 seq_no = 1;
}

// CACHE
service CacheService {
  rpc GetFromRun (GetFromRunRequest) returns (GetFromRunResponse);
  rpc ScanFromRun (ScanFromRunRequest) returns (ScanFromRunResponse);
}

message GetFromRunRequest {
  repeated string run_ids = 1;
  repeated string keys = 2;
}

message GetFromRunResponse {
  repeated GetFromRunItem items = 1;
}

message GetFromRunItem {
  string key = 1;
  oneof result {
    bytes value = 2;
    google.protobuf.Empty deleted = 3;
  }
}

message ScanFromRunRequest {
  repeated string run_ids = 1;
  string exclusive_start_key = 2;
  uint64 max_results = 3;
}

message ScanFromRunResponse {
  repeated GetFromRunItem items = 1;
}

// READER
service ReaderService {
  rpc GetBatch (GetBatchRequest) returns (GetBatchResponse);
  rpc Scan (ScanRequest) returns (ScanResponse);
}

message GetBatchRequest {
  int64 seq_no = 1; 
  repeated TableGetBatchRequest tables = 2;
}

message TableGetBatchRequest {
  string table_name = 1;
  repeated string keys = 2;
}

message GetBatchResponse {
  repeated TableGetBatchResponse tables = 1;
}

message TableGetBatchResponse {
  string table_name = 1;
  repeated GetBatchItem items = 2;
}

message GetBatchItem {
  string key = 1;
  bytes value = 2;
}

message ScanRequest {
  string table_name = 1;
  string exclusive_start_key = 2;
  uint64 max_results = 3;
}

message ScanResponse {
  repeated ScanItem items = 1;
}

message ScanItem {
  string key = 1;
  bytes value = 2;
}

// ORCHESTRATOR
service OrchestratorService {
  rpc DumpSnapshot (DumpSnapshotRequest) returns (DumpSnapshotResponse);
  rpc DumpSnapshotSummary (DumpSnapshotSummaryRequest) returns (DumpSnapshotSummaryResponse);
  rpc DumpChangelog (DumpChangelogRequest) returns (DumpChangelogResponse);

  rpc KickOffJob (KickOffJobRequest) returns (KickOffJobResponse);
  rpc ListJobs (ListJobsRequest) returns (ListJobsResponse);
  rpc GetJobStatus (GetJobStatusRequest) returns (GetJobStatusResponse);

  rpc CreateTable (CreateTableRequest) returns (CreateTableResponse);
  rpc ListTables (ListTablesRequest) returns (ListTablesResponse);
  rpc DropTable (DropTableRequest) returns (DropTableResponse);
  rpc GetTable (GetTableRequest) returns (GetTableResponse);

  rpc PersistSnapshot (PersistSnapshotRequest) returns (PersistSnapshotResponse);
}

message TableTreeCompaction {
  int64 table_id = 1;
  uint64 level = 2;
}

message JobParams {
  oneof params {
    google.protobuf.Empty wal_compaction = 1;
    int64 table_buffer_compaction = 2;
    TableTreeCompaction table_tree_compaction = 3;
  }
}

message JobStatus {
  oneof status {
    bool pending = 1;
    int64 seq_no = 2;
    bool failed = 3;
  }
}

message KickOffJobRequest {
  JobParams params = 1;
}

message KickOffJobResponse {
  int64 job_id = 1;
}

message ListJobsRequest {
  int64 limit = 1;
}

message Job {
  int64 id = 1;
  JobParams params = 2;
  JobStatus status = 3;
}

message ListJobsResponse {
  repeated Job jobs = 1;
}


message GetJobStatusRequest {
  int64 job_id = 1;
}

message GetJobStatusResponse {
  JobStatus status = 1;
}

message DumpSnapshotSummaryRequest {
}

message DumpSnapshotSummaryResponse {
  uint64 wal_size_bytes = 1;
  uint64 wal_run_count = 2;
  repeated TableSummary tables = 3;
}

message TableSummary {
  string table_name = 1;
  uint64 buffer_size_bytes = 2;
  uint64 buffer_run_count = 3;
  repeated TableLevelSummary levels = 4;
}

message TableLevelSummary {
  uint64 level = 1;
  uint64 size_bytes = 2;
  uint64 run_count = 3;
}


message DumpSnapshotRequest {
}

message DumpSnapshotResponse {
  Snapshot snapshot = 1;
}

message Snapshot {
  int64 seq_no = 1;

  // Tables
  map<string, TableConfig> tables = 2;

  // Runs
  repeated RunMetadata wal = 3;
  repeated TableTree trees = 4;
}

message TableTree {
  int64 table_id = 1;
  repeated RunMetadata buffer = 2;
  repeated TableLevel levels = 3;
}

message TableLevel {
  uint64 level = 1;
  repeated RunMetadata runs = 2;
}

message DumpChangelogRequest {
  int64 from_seq_no = 1;
}

message DumpChangelogResponse {
  repeated ChangelogEntryWithID entries = 1;
}

message ChangelogEntryWithID {
  int64 id = 1;

  oneof entry {
    RunsChangelogEntryV1 runs_changelog_entry_v1 = 2;
    TableChangelogEntryV1 table_changelog_entry_v1 = 3;
  }
}

message RunsChangelogEntryV1 {
  repeated string runs_added = 1;
  repeated string runs_removed = 2;
}

message TableChangelogEntryV1 {
  oneof entry {
    TableCreated table_created = 1;
    TableDropped table_dropped = 2;
  }
}

message TableCreated {
  int64 table_id = 1;
}

message TableDropped {
  int64 table_id = 1;
}

message RunMetadata {
  string id = 1;

  oneof belongs_to {
    int64 wal_seq_no = 2;
    TableBuffer table_buffer = 3;
    TableTreeLevel table_tree = 4;
  };

  oneof stats {
    StatsV1 stats_v1 = 1001;
  }
}

message TableBuffer {
  int64 table_id = 1;
  int64 seq_no = 2;
}

message TableTreeLevel {
  int64 table_id = 1;
  uint64 level = 2;
}

message StatsV1 {
  string min_key = 1;
  string max_key = 2;
  uint64 size_bytes = 3;
  uint64 put_count = 4;
  uint64 delete_count = 5;
}

message PersistSnapshotRequest {
}

message PersistSnapshotResponse {
  string snapshot_id = 1;
  int64 seq_no = 2;
}

message CreateTableRequest {
  TableConfig config = 1;
}

message CreateTableResponse {
  int64 seq_no = 1;
}

message ListTablesRequest {
}

message ListTablesResponse {
  repeated TableConfig tables = 1;
}

message DropTableRequest {
  string table_name = 1;
}

message DropTableResponse {
  int64 seq_no = 1;
}

message GetTableRequest {
  string table_name = 1;
}

message GetTableResponse {
  TableConfig table = 1;
}

message TableConfig {
  int64 table_id = 1; // assigned after table is created
  string table_name = 2;
}