# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from skyvault.v1 import skyvault_pb2 as skyvault_dot_v1_dot_skyvault__pb2


class WriterServiceStub(object):
    """WRITER"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WriteBatch = channel.unary_unary(
            "/skyvault.v1.WriterService/WriteBatch",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.WriteBatchRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.WriteBatchResponse.FromString,
            _registered_method=True,
        )


class WriterServiceServicer(object):
    """WRITER"""

    def WriteBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_WriterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "WriteBatch": grpc.unary_unary_rpc_method_handler(
            servicer.WriteBatch,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.WriteBatchRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.WriteBatchResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "skyvault.v1.WriterService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "skyvault.v1.WriterService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class WriterService(object):
    """WRITER"""

    @staticmethod
    def WriteBatch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.WriterService/WriteBatch",
            skyvault_dot_v1_dot_skyvault__pb2.WriteBatchRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.WriteBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class CacheServiceStub(object):
    """CACHE"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFromRun = channel.unary_unary(
            "/skyvault.v1.CacheService/GetFromRun",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.GetFromRunRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.GetFromRunResponse.FromString,
            _registered_method=True,
        )
        self.ScanFromRun = channel.unary_unary(
            "/skyvault.v1.CacheService/ScanFromRun",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.ScanFromRunRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.ScanFromRunResponse.FromString,
            _registered_method=True,
        )


class CacheServiceServicer(object):
    """CACHE"""

    def GetFromRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ScanFromRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CacheServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetFromRun": grpc.unary_unary_rpc_method_handler(
            servicer.GetFromRun,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.GetFromRunRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.GetFromRunResponse.SerializeToString,
        ),
        "ScanFromRun": grpc.unary_unary_rpc_method_handler(
            servicer.ScanFromRun,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.ScanFromRunRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.ScanFromRunResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "skyvault.v1.CacheService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "skyvault.v1.CacheService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class CacheService(object):
    """CACHE"""

    @staticmethod
    def GetFromRun(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.CacheService/GetFromRun",
            skyvault_dot_v1_dot_skyvault__pb2.GetFromRunRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.GetFromRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ScanFromRun(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.CacheService/ScanFromRun",
            skyvault_dot_v1_dot_skyvault__pb2.ScanFromRunRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.ScanFromRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class ReaderServiceStub(object):
    """READER"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBatch = channel.unary_unary(
            "/skyvault.v1.ReaderService/GetBatch",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.GetBatchRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.GetBatchResponse.FromString,
            _registered_method=True,
        )
        self.Scan = channel.unary_unary(
            "/skyvault.v1.ReaderService/Scan",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.ScanRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.ScanResponse.FromString,
            _registered_method=True,
        )


class ReaderServiceServicer(object):
    """READER"""

    def GetBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Scan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ReaderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetBatch": grpc.unary_unary_rpc_method_handler(
            servicer.GetBatch,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.GetBatchRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.GetBatchResponse.SerializeToString,
        ),
        "Scan": grpc.unary_unary_rpc_method_handler(
            servicer.Scan,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.ScanRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.ScanResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "skyvault.v1.ReaderService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "skyvault.v1.ReaderService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class ReaderService(object):
    """READER"""

    @staticmethod
    def GetBatch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.ReaderService/GetBatch",
            skyvault_dot_v1_dot_skyvault__pb2.GetBatchRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.GetBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Scan(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.ReaderService/Scan",
            skyvault_dot_v1_dot_skyvault__pb2.ScanRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.ScanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class OrchestratorServiceStub(object):
    """ORCHESTRATOR"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DumpSnapshot = channel.unary_unary(
            "/skyvault.v1.OrchestratorService/DumpSnapshot",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.DumpSnapshotRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.DumpSnapshotResponse.FromString,
            _registered_method=True,
        )
        self.DumpChangelog = channel.unary_unary(
            "/skyvault.v1.OrchestratorService/DumpChangelog",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.DumpChangelogRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.DumpChangelogResponse.FromString,
            _registered_method=True,
        )
        self.KickOffJob = channel.unary_unary(
            "/skyvault.v1.OrchestratorService/KickOffJob",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.KickOffJobRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.KickOffJobResponse.FromString,
            _registered_method=True,
        )
        self.GetJobStatus = channel.unary_unary(
            "/skyvault.v1.OrchestratorService/GetJobStatus",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.GetJobStatusRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.GetJobStatusResponse.FromString,
            _registered_method=True,
        )
        self.CreateTable = channel.unary_unary(
            "/skyvault.v1.OrchestratorService/CreateTable",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.CreateTableRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.CreateTableResponse.FromString,
            _registered_method=True,
        )
        self.ListTables = channel.unary_unary(
            "/skyvault.v1.OrchestratorService/ListTables",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.ListTablesRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.ListTablesResponse.FromString,
            _registered_method=True,
        )
        self.DropTable = channel.unary_unary(
            "/skyvault.v1.OrchestratorService/DropTable",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.DropTableRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.DropTableResponse.FromString,
            _registered_method=True,
        )
        self.GetTable = channel.unary_unary(
            "/skyvault.v1.OrchestratorService/GetTable",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.GetTableRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.GetTableResponse.FromString,
            _registered_method=True,
        )
        self.PersistSnapshot = channel.unary_unary(
            "/skyvault.v1.OrchestratorService/PersistSnapshot",
            request_serializer=skyvault_dot_v1_dot_skyvault__pb2.PersistSnapshotRequest.SerializeToString,
            response_deserializer=skyvault_dot_v1_dot_skyvault__pb2.PersistSnapshotResponse.FromString,
            _registered_method=True,
        )


class OrchestratorServiceServicer(object):
    """ORCHESTRATOR"""

    def DumpSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DumpChangelog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def KickOffJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetJobStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListTables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DropTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PersistSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_OrchestratorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "DumpSnapshot": grpc.unary_unary_rpc_method_handler(
            servicer.DumpSnapshot,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.DumpSnapshotRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.DumpSnapshotResponse.SerializeToString,
        ),
        "DumpChangelog": grpc.unary_unary_rpc_method_handler(
            servicer.DumpChangelog,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.DumpChangelogRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.DumpChangelogResponse.SerializeToString,
        ),
        "KickOffJob": grpc.unary_unary_rpc_method_handler(
            servicer.KickOffJob,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.KickOffJobRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.KickOffJobResponse.SerializeToString,
        ),
        "GetJobStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetJobStatus,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.GetJobStatusRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.GetJobStatusResponse.SerializeToString,
        ),
        "CreateTable": grpc.unary_unary_rpc_method_handler(
            servicer.CreateTable,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.CreateTableRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.CreateTableResponse.SerializeToString,
        ),
        "ListTables": grpc.unary_unary_rpc_method_handler(
            servicer.ListTables,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.ListTablesRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.ListTablesResponse.SerializeToString,
        ),
        "DropTable": grpc.unary_unary_rpc_method_handler(
            servicer.DropTable,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.DropTableRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.DropTableResponse.SerializeToString,
        ),
        "GetTable": grpc.unary_unary_rpc_method_handler(
            servicer.GetTable,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.GetTableRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.GetTableResponse.SerializeToString,
        ),
        "PersistSnapshot": grpc.unary_unary_rpc_method_handler(
            servicer.PersistSnapshot,
            request_deserializer=skyvault_dot_v1_dot_skyvault__pb2.PersistSnapshotRequest.FromString,
            response_serializer=skyvault_dot_v1_dot_skyvault__pb2.PersistSnapshotResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "skyvault.v1.OrchestratorService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "skyvault.v1.OrchestratorService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class OrchestratorService(object):
    """ORCHESTRATOR"""

    @staticmethod
    def DumpSnapshot(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.OrchestratorService/DumpSnapshot",
            skyvault_dot_v1_dot_skyvault__pb2.DumpSnapshotRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.DumpSnapshotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DumpChangelog(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.OrchestratorService/DumpChangelog",
            skyvault_dot_v1_dot_skyvault__pb2.DumpChangelogRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.DumpChangelogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def KickOffJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.OrchestratorService/KickOffJob",
            skyvault_dot_v1_dot_skyvault__pb2.KickOffJobRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.KickOffJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetJobStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.OrchestratorService/GetJobStatus",
            skyvault_dot_v1_dot_skyvault__pb2.GetJobStatusRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.GetJobStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateTable(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.OrchestratorService/CreateTable",
            skyvault_dot_v1_dot_skyvault__pb2.CreateTableRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.CreateTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListTables(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.OrchestratorService/ListTables",
            skyvault_dot_v1_dot_skyvault__pb2.ListTablesRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.ListTablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DropTable(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.OrchestratorService/DropTable",
            skyvault_dot_v1_dot_skyvault__pb2.DropTableRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.DropTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetTable(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.OrchestratorService/GetTable",
            skyvault_dot_v1_dot_skyvault__pb2.GetTableRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.GetTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PersistSnapshot(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/skyvault.v1.OrchestratorService/PersistSnapshot",
            skyvault_dot_v1_dot_skyvault__pb2.PersistSnapshotRequest.SerializeToString,
            skyvault_dot_v1_dot_skyvault__pb2.PersistSnapshotResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
