# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from proto import skyvault_pb2 as proto_dot_skyvault__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/skyvault_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WriterServiceStub(object):
    """WRITER
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WriteBatch = channel.unary_unary(
                '/skyvault.WriterService/WriteBatch',
                request_serializer=proto_dot_skyvault__pb2.WriteBatchRequest.SerializeToString,
                response_deserializer=proto_dot_skyvault__pb2.WriteBatchResponse.FromString,
                _registered_method=True)


class WriterServiceServicer(object):
    """WRITER
    """

    def WriteBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WriterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WriteBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteBatch,
                    request_deserializer=proto_dot_skyvault__pb2.WriteBatchRequest.FromString,
                    response_serializer=proto_dot_skyvault__pb2.WriteBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'skyvault.WriterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('skyvault.WriterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WriterService(object):
    """WRITER
    """

    @staticmethod
    def WriteBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/skyvault.WriterService/WriteBatch',
            proto_dot_skyvault__pb2.WriteBatchRequest.SerializeToString,
            proto_dot_skyvault__pb2.WriteBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ReaderServiceStub(object):
    """READER
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBatch = channel.unary_unary(
                '/skyvault.ReaderService/GetBatch',
                request_serializer=proto_dot_skyvault__pb2.GetBatchRequest.SerializeToString,
                response_deserializer=proto_dot_skyvault__pb2.GetBatchResponse.FromString,
                _registered_method=True)
        self.GetFromWAL = channel.unary_unary(
                '/skyvault.ReaderService/GetFromWAL',
                request_serializer=proto_dot_skyvault__pb2.GetFromWALRequest.SerializeToString,
                response_deserializer=proto_dot_skyvault__pb2.GetFromWALResponse.FromString,
                _registered_method=True)


class ReaderServiceServicer(object):
    """READER
    """

    def GetBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFromWAL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReaderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatch,
                    request_deserializer=proto_dot_skyvault__pb2.GetBatchRequest.FromString,
                    response_serializer=proto_dot_skyvault__pb2.GetBatchResponse.SerializeToString,
            ),
            'GetFromWAL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFromWAL,
                    request_deserializer=proto_dot_skyvault__pb2.GetFromWALRequest.FromString,
                    response_serializer=proto_dot_skyvault__pb2.GetFromWALResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'skyvault.ReaderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('skyvault.ReaderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReaderService(object):
    """READER
    """

    @staticmethod
    def GetBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/skyvault.ReaderService/GetBatch',
            proto_dot_skyvault__pb2.GetBatchRequest.SerializeToString,
            proto_dot_skyvault__pb2.GetBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFromWAL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/skyvault.ReaderService/GetFromWAL',
            proto_dot_skyvault__pb2.GetFromWALRequest.SerializeToString,
            proto_dot_skyvault__pb2.GetFromWALResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OrchestratorServiceStub(object):
    """ORCHESTRATOR
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListRuns = channel.unary_unary(
                '/skyvault.OrchestratorService/ListRuns',
                request_serializer=proto_dot_skyvault__pb2.ListRunsRequest.SerializeToString,
                response_deserializer=proto_dot_skyvault__pb2.ListRunsResponse.FromString,
                _registered_method=True)
        self.DumpChangelog = channel.unary_unary(
                '/skyvault.OrchestratorService/DumpChangelog',
                request_serializer=proto_dot_skyvault__pb2.DumpChangelogRequest.SerializeToString,
                response_deserializer=proto_dot_skyvault__pb2.DumpChangelogResponse.FromString,
                _registered_method=True)
        self.KickOffWALCompaction = channel.unary_unary(
                '/skyvault.OrchestratorService/KickOffWALCompaction',
                request_serializer=proto_dot_skyvault__pb2.KickOffWALCompactionRequest.SerializeToString,
                response_deserializer=proto_dot_skyvault__pb2.KickOffWALCompactionResponse.FromString,
                _registered_method=True)
        self.GetJobStatus = channel.unary_unary(
                '/skyvault.OrchestratorService/GetJobStatus',
                request_serializer=proto_dot_skyvault__pb2.GetJobStatusRequest.SerializeToString,
                response_deserializer=proto_dot_skyvault__pb2.GetJobStatusResponse.FromString,
                _registered_method=True)


class OrchestratorServiceServicer(object):
    """ORCHESTRATOR
    """

    def ListRuns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DumpChangelog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KickOffWALCompaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrchestratorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListRuns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRuns,
                    request_deserializer=proto_dot_skyvault__pb2.ListRunsRequest.FromString,
                    response_serializer=proto_dot_skyvault__pb2.ListRunsResponse.SerializeToString,
            ),
            'DumpChangelog': grpc.unary_unary_rpc_method_handler(
                    servicer.DumpChangelog,
                    request_deserializer=proto_dot_skyvault__pb2.DumpChangelogRequest.FromString,
                    response_serializer=proto_dot_skyvault__pb2.DumpChangelogResponse.SerializeToString,
            ),
            'KickOffWALCompaction': grpc.unary_unary_rpc_method_handler(
                    servicer.KickOffWALCompaction,
                    request_deserializer=proto_dot_skyvault__pb2.KickOffWALCompactionRequest.FromString,
                    response_serializer=proto_dot_skyvault__pb2.KickOffWALCompactionResponse.SerializeToString,
            ),
            'GetJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobStatus,
                    request_deserializer=proto_dot_skyvault__pb2.GetJobStatusRequest.FromString,
                    response_serializer=proto_dot_skyvault__pb2.GetJobStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'skyvault.OrchestratorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('skyvault.OrchestratorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrchestratorService(object):
    """ORCHESTRATOR
    """

    @staticmethod
    def ListRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/skyvault.OrchestratorService/ListRuns',
            proto_dot_skyvault__pb2.ListRunsRequest.SerializeToString,
            proto_dot_skyvault__pb2.ListRunsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DumpChangelog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/skyvault.OrchestratorService/DumpChangelog',
            proto_dot_skyvault__pb2.DumpChangelogRequest.SerializeToString,
            proto_dot_skyvault__pb2.DumpChangelogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def KickOffWALCompaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/skyvault.OrchestratorService/KickOffWALCompaction',
            proto_dot_skyvault__pb2.KickOffWALCompactionRequest.SerializeToString,
            proto_dot_skyvault__pb2.KickOffWALCompactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/skyvault.OrchestratorService/GetJobStatus',
            proto_dot_skyvault__pb2.GetJobStatusRequest.SerializeToString,
            proto_dot_skyvault__pb2.GetJobStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
