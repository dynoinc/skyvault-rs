---
# Service account for the test
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ include "skyvault.fullname" . }}-test-sa"
  labels:
    {{- include "skyvault.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
# Role for the test
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "{{ include "skyvault.fullname" . }}-test-role"
  labels:
    {{- include "skyvault.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "0" 
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list"]
---
# Role binding for the test
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "{{ include "skyvault.fullname" . }}-test-rb"
  labels:
    {{- include "skyvault.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
subjects:
- kind: ServiceAccount
  name: "{{ include "skyvault.fullname" . }}-test-sa"
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: "{{ include "skyvault.fullname" . }}-test-role"
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "skyvault.fullname" . }}-test-cache-statefulset"
  labels:
    {{- include "skyvault.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  serviceAccountName: "{{ include "skyvault.fullname" . }}-test-sa"
  containers:
  - name: cache-statefulset-test
    image: bitnami/kubectl:latest
    command: ["/bin/bash"]
    args:
      - -c
      - |
        set -e
        echo "Testing cache service StatefulSet and PVC creation logic..."
        
        {{- range $key, $deployment := .Values.deployments }}
        {{- if $deployment.enabled }}
        {{- $isCacheService := eq ((get ($deployment.env | default dict) "SKYVAULT_SERVICE" | default "") | toString) "cache" }}
        {{- $usePVC := and $isCacheService (eq (get ($deployment.cache | default dict) "volumeType" | default "none") "pvc") }}
        {{- $volumeType := get ($deployment.cache | default dict) "volumeType" | default "none" }}
        
        {{- if $isCacheService }}
        echo "Testing cache service: {{ $deployment.instanceName }} (volumeType: {{ $volumeType }})"
        
        # Cache services should always be StatefulSet
        if kubectl get statefulset skyvault-{{ $deployment.instanceName }} > /dev/null 2>&1; then
          echo "✓ Cache service {{ $deployment.instanceName }} is a StatefulSet"
        else
          echo "✗ Cache service {{ $deployment.instanceName }} should be a StatefulSet"
          exit 1
        fi
        
        # Should NOT be a Deployment
        if kubectl get deployment skyvault-{{ $deployment.instanceName }} > /dev/null 2>&1; then
          echo "✗ Cache service {{ $deployment.instanceName }} should not be a Deployment"
          exit 1
        else
          echo "✓ Cache service {{ $deployment.instanceName }} is not a Deployment (correct)"
        fi
        
        {{- if $usePVC }}
        # Cache service with PVC should have volumeClaimTemplates
        echo "Checking that cache service {{ $deployment.instanceName }} with PVC has volumeClaimTemplates..."
        kubectl get statefulset skyvault-{{ $deployment.instanceName }} -o jsonpath='{.spec.volumeClaimTemplates[0].metadata.name}' | grep -q "cache-volume"
        if [ $? -eq 0 ]; then
          echo "✓ StatefulSet skyvault-{{ $deployment.instanceName }} has volumeClaimTemplates"
        else
          echo "✗ StatefulSet skyvault-{{ $deployment.instanceName }} missing volumeClaimTemplates"
          exit 1
        fi
        
        # Check that PVCs are actually created by the StatefulSet
        if kubectl get pvc -l app.kubernetes.io/component=skyvault-{{ $deployment.instanceName }} --no-headers | wc -l | grep -q -v "^0$"; then
          echo "✓ PVCs exist for {{ $deployment.instanceName }}"
        else
          echo "✗ No PVCs found for {{ $deployment.instanceName }}"
          exit 1
        fi
        
        {{- else }}
        # Cache service without PVC should not have PVCs
        echo "Checking that cache service {{ $deployment.instanceName }} without PVC has no PVCs..."
        
        if [ "$(kubectl get pvc -l app.kubernetes.io/component=skyvault-{{ $deployment.instanceName }} --no-headers 2>/dev/null | wc -l)" -eq "0" ]; then
          echo "✓ No PVCs exist for {{ $deployment.instanceName }} (volumeType: {{ $volumeType }})"
        else
          echo "✗ Unexpected PVCs found for {{ $deployment.instanceName }} (volumeType: {{ $volumeType }})"
          exit 1
        fi
        
        # Should not have volumeClaimTemplates
        if kubectl get statefulset skyvault-{{ $deployment.instanceName }} -o jsonpath='{.spec.volumeClaimTemplates}' 2>/dev/null | grep -q "cache-volume"; then
          echo "✗ StatefulSet skyvault-{{ $deployment.instanceName }} should not have volumeClaimTemplates"
          exit 1
        else
          echo "✓ StatefulSet skyvault-{{ $deployment.instanceName }} has no volumeClaimTemplates (correct)"
        fi
        {{- end }}
        
        {{- else }}
        # Non-cache services should always be Deployment
        echo "Testing non-cache service: {{ $deployment.instanceName }}"
        
        if kubectl get deployment skyvault-{{ $deployment.instanceName }} > /dev/null 2>&1; then
          echo "✓ Non-cache service {{ $deployment.instanceName }} is a Deployment"
        else
          echo "✗ Non-cache service {{ $deployment.instanceName }} should be a Deployment"
          exit 1
        fi
        
        # Should NOT be a StatefulSet
        if kubectl get statefulset skyvault-{{ $deployment.instanceName }} > /dev/null 2>&1; then
          echo "✗ Non-cache service {{ $deployment.instanceName }} should not be a StatefulSet"
          exit 1
        else
          echo "✓ Non-cache service {{ $deployment.instanceName }} is not a StatefulSet (correct)"
        fi
        
        # Should have no PVCs
        if [ "$(kubectl get pvc -l app.kubernetes.io/component=skyvault-{{ $deployment.instanceName }} --no-headers 2>/dev/null | wc -l)" -eq "0" ]; then
          echo "✓ No PVCs exist for non-cache service {{ $deployment.instanceName }}"
        else
          echo "✗ Unexpected PVCs found for non-cache service {{ $deployment.instanceName }}"
          exit 1
        fi
        {{- end }}
        
        echo "---"
        {{- end }}
        {{- end }}
        
        echo "All cache service StatefulSet and PVC tests passed!" 